syntax = "proto3";

package mlmodel;

message RetrievalEmbedding {
    int32 size = 1;
    repeated double embeddings = 2;
}

message AllAdEmbeddings {
    string version = 1;
    map<int32, RetrievalEmbedding> allEmbeddings = 2;
}

message FtrlProto {
    double alpha = 1;
    double beta = 2;
    double L1 = 3;
    double L2 = 4;
    map<int32, double> n = 5;
    map<int32, double> z = 6;
    map<int32, double> w = 7;
}

message LRModel {
    map<int32, double> weights = 1;
    string parser = 2;
    int32 feature_num = 3;
    double auPRC = 4;
    double auROC = 5;
}

enum Strategy {
    StrategyNone = 0;
    StrategyLR = 1;
    StrategyXgboost = 2;
    StrategyLRXgboost = 3;
    StrategyXgboostLR = 4;
    StrategyXgboostFtrl = 5;
    StrategyXgboostBS = 6;
    StrategyDNNRawID = 7;
}

message IRModel {
    repeated double boundaries = 1;
    repeated double predictions = 2;
    double mean_square_error = 3;
}

message Dict {
    map<int32, int32> planid = 1;
    map<int32, int32> unitid = 2;
    map<int32, int32> ideaid = 3;
    map<int32, int32> adclass = 4;
    map<int32, int32> slotid = 5;
    map<int32, int32> cityid = 6;
    map<int32, int32> mediaid = 7;
    map<string, int32> appid = 8;
    map<int32, int32> advertiserid = 9;
    map<string, int32> stringid = 10;
}


message Pack {
    string name = 1;
    LRModel lr = 2;
    IRModel ir = 3;
    Dict dict = 4;
    int64 create_time = 5;
    uint32 gbm_tree_limit = 6;
    string gbmfile = 7;
    Strategy strategy = 8;
    uint32 gbm_tree_depth = 9;
    double negSampleRatio = 10;
    int64 xg_feature_num = 11;
    string onnx_file = 12;
    string dnn_graph_file = 13;
    string dnn_idx_file = 14;
    string dnn_embed_file = 15;
    uint32 dnn_embed_width = 16;
    bool use_model_server = 17;
    ModelServer model_server = 18;
    repeated int32 dnn_redis_groups = 19;
    string dnn_feaconf_file = 20;
}

message ModelServer {
    string name = 1;
    int32 redis_db = 2;
    int64 data_expires = 3; //数据过期时间 second
}

message CalibrationConfig {
    string name = 1;
    IRModel ir = 2;
    int64 timestamp = 3;
}

message PostCalibrations {
    map<string,CalibrationConfig> cali_map = 1;
}

message ProtoPortrait {
    int64 id = 1;
    string sid = 2;
    map<int64, float> valueMap = 3;
    map<string, ProtoPortrait> subMap = 4;
}

message ProtoPortraitFile {
    map<string, mlmodel.ProtoPortrait> subMap = 1;
}

message Snapshot {
    map<string, int32> raw_int = 1;
    map<string, string> raw_str = 2;
    map<int32, float> feature_vector = 3;
    float result = 4;
    string req_version = 5;
    string model_name = 6;
    int32 data_type = 7;
    Strategy strategy = 8;
    float calibrated = 9;
}

message AccessLog {
    string searchid = 1;
    repeated Snapshot snapshots = 2;
    int64 timestamp = 3;
}


message IntArray {
    repeated int64 value = 1;
}

message FloatArray {
    repeated float value = 1;
}

message DnnMultiHot {
    repeated uint32 group = 1;
    repeated uint64 hashcode = 2;
}

//----------------------------snapshot--

enum ModelType {
    MTYPE_NONE = 0;
    MTYPE_CTR = 1;
    MTYPE_CVR = 2;
    MYTPE_API_CVR = 3;
}

message FeatureGroup {
    map<string, double> namedValue = 1;
    repeated string strClass = 2;
    repeated int32 intClass = 3;
    repeated double vector = 4;
    repeated int64 longClass = 5;
}

message AdScoringEvent {
    int64 timestamp = 1;
    string insertionID = 2;  // unique key for each ad insertion
    int32 userID = 3;
    int32 ideaID = 4; // various Ad internal ids
    string uid = 5;
    string version = 6;
    ModelType modelType = 7;
    repeated FeatureGroup dnnMultihot = 8;
    map<string, FeatureGroup> featureGroups = 100;
}
//----------------------------

message ID2idx {
    string key = 1;
    repeated uint64 values = 2;
}

message ad_idx {
    repeated ID2idx ideaid = 1;
}

message FeatureStore {
    repeated Feature features = 1;
}

message Feature {
 // also serves as hash_prefix
 string name = 1;

 // str / int32 / float / int64
 int32 type = 2;

 repeated string str_list = 3;
 repeated int32 int_list = 4;
 repeated float float_list = 5;

 repeated int64 int64_list = 6;
}

message Slot {
    int32 slot_id = 1;
    float start_offset = 2;
}

message SlotInfo {
    repeated Slot slots = 1;
}

message CalibrationFeature {
    int32 as_idx = 1; //特征对应的as idx
    string prefix = 2; //特征前缀   e.g.ideaid#,unitid#
    int32 types = 3; //type:0 数值特征，type:1分类特征
    int32 value_op = 4; // 0, 不处理，直接取特征值；1，字符串取prefix_len位前缀；2,数值分箱，取slot_id
    oneof classify_type {
    int32 prefix_len = 5; // value_op = 1时，表示特征字符串取前prefix_len位.
    Slot slots = 6; // value_op = 2 时，表示特征值所在分箱的配置。
  }
}

message CalibrationModel {
    repeated CalibrationFeature feature = 1; //使用特征类型
    map<string,double> featuremap = 2; //特征值
    double w_rawvalue = 3; //rawcvr的参数
    double intercept = 4; //模型截距
    double min = 5; //模型下限
}
